#!/usr/bin/env ruby

require 'monoprice10761'
require 'mqtt'

class MQTTBridge
  def initialize(mqtt_uri, amp, device_id: "monoprice10761", base_topic: "homie")
    @base_topic = "#{base_topic}/#{device_id}"
    @mqtt = MQTT::Client.new(mqtt_uri)
    @mqtt.set_will("#{@base_topic}/$state", "lost", true)
    @mqtt.connect
    @amp = amp
    amp.zone_updated_proc = method(:zone_updated)
    @attributes = {}

    publish_basic_attributes

    @mqtt.get do |topic, value|
      puts "got #{value.inspect} at #{topic}"

      topic = topic[@base_topic.length + 1..-1]
      zone_id = topic[4..5].to_i
      topic = topic[7..-1]
      case topic
      when %r{^(pa|power|mute|do-not-disturb)/set$}
        action = $1.gsub('-', '_').to_sym
        next unless ['true', 'false'].include?(value)
        value = value == 'true'
        amp.send(action, zone_id, value)
      when %r{^(volume|treble|bass|balance|channel)/set$}
        action = $1.to_sym
        next unless value =~ /^\d+$/
        value = value.to_i
        begin
          amp.send(action, zone_id, value)
        rescue ArgumentError
          # out of range
        end
      end
    end
  end

  def publish(topic, value)
    @mqtt.publish("#{@base_topic}/#{topic}", value, true, 1)
  end

  def publish_attribute(zone_id, attr, value)
    return if value.nil?
    if @attributes.dig(zone_id, attr) != value
      publish("zone#{zone_id}/#{attr}", value.to_s)
      (@attributes[zone_id] ||= {})[attr] = value
    end
  end

  def subscribe(topic)
    @mqtt.subscribe("#{@base_topic}/#{topic}")
  end

  def publish_basic_attributes
    publish("$homie", "v4.0.0")
    publish("$name", "Monoprice 10761 Multi-Zone Amp")
    publish("$state", "init")
    publish("$nodes", @amp.zones.map { |z| "zone#{z.id}" }.join(","))

    @amp.zones.each do |z|
      publish("zone#{z.id}/$name", "Zone #{z.id}")
      publish("zone#{z.id}/$type", "Audio Zone")
      publish("zone#{z.id}/$properties", "pa,power,mute,do-not-disturb,volume,treble,bass,balance,channel,keypad-connected")

      publish("zone#{z.id}/pa/$name", "Public Address Triggered")
      publish("zone#{z.id}/pa/$datatype", "boolean")
      publish("zone#{z.id}/pa/$settable", "true")
      subscribe("zone#{z.id}/pa/set")

      publish("zone#{z.id}/power/$name", "Zone is On")
      publish("zone#{z.id}/power/$datatype", "boolean")
      publish("zone#{z.id}/power/$settable", "true")
      subscribe("zone#{z.id}/power/set")

      publish("zone#{z.id}/mute/$name", "Audio is Muted")
      publish("zone#{z.id}/mute/$datatype", "boolean")
      publish("zone#{z.id}/mute/$settable", "true")
      subscribe("zone#{z.id}/mute/set")

      publish("zone#{z.id}/do-not-disturb/$name", "Do Not Disturb (PA Override) Enabled")
      publish("zone#{z.id}/do-not-disturb/$datatype", "boolean")
      publish("zone#{z.id}/do-not-disturb/$settable", "true")
      subscribe("zone#{z.id}/do-not-disturb/set")

      publish("zone#{z.id}/volume/$name", "Volume")
      publish("zone#{z.id}/volume/$datatype", "integer")
      publish("zone#{z.id}/volume/$format", "0:38")
      publish("zone#{z.id}/volume/$settable", "true")
      subscribe("zone#{z.id}/volume/set")

      publish("zone#{z.id}/treble/$name", "Treble")
      publish("zone#{z.id}/treble/$datatype", "integer")
      publish("zone#{z.id}/treble/$format", "0:14")
      publish("zone#{z.id}/treble/$settable", "true")
      subscribe("zone#{z.id}/treble/set")

      publish("zone#{z.id}/bass/$name", "Bass")
      publish("zone#{z.id}/bass/$datatype", "integer")
      publish("zone#{z.id}/bass/$format", "0:14")
      publish("zone#{z.id}/bass/$settable", "true")
      subscribe("zone#{z.id}/bass/set")

      publish("zone#{z.id}/balance/$name", "L/R Balance")
      publish("zone#{z.id}/balance/$datatype", "integer")
      publish("zone#{z.id}/balance/$format", "-10:10")
      publish("zone#{z.id}/balance/$settable", "true")
      subscribe("zone#{z.id}/balance/set")

      publish("zone#{z.id}/channel/$name", "Input Channel")
      publish("zone#{z.id}/channel/$datatype", "integer")
      publish("zone#{z.id}/channel/$format", "1:6")
      publish("zone#{z.id}/channel/$settable", "true")
      subscribe("zone#{z.id}/channel/set")

      publish("zone#{z.id}/keypad-connected/$name", "Keypad Connected")
      publish("zone#{z.id}/keypad-connected/$datatype", "boolean")

      zone_updated(z)
    end

    publish("$state", "ready")
  end

  def zone_updated(zone)
    publish_attribute(zone.id, 'pa', zone.pa)
    publish_attribute(zone.id, 'power', zone.power)
    publish_attribute(zone.id, 'mute', zone.mute)
    publish_attribute(zone.id, 'do-not-disturb', zone.do_not_disturb)
    publish_attribute(zone.id, 'volume', zone.volume)
    publish_attribute(zone.id, 'treble', zone.treble)
    publish_attribute(zone.id, 'bass', zone.bass)
    publish_attribute(zone.id, 'balance', zone.balance)
    publish_attribute(zone.id, 'channel', zone.channel)
    publish_attribute(zone.id, 'keypad-connected', zone.keypad_connected)
  end
end

mqtt_uri = ARGV.shift
amp_uri = ARGV.shift
device_id = ARGV.shift

amp = Monoprice10761::Amp.new(amp_uri)

MQTTBridge.new(mqtt_uri, amp, device_id: device_id || "monoprice10761")
